{"ast":null,"code":"import{useMutation,useQuery,useQueryClient}from'@tanstack/react-query';import{apiService}from'../services/api';// Query keys for React Query\nexport const queryKeys={slots:['slots'],bookings:['bookings'],booking:id=>['booking',id]};// Hook to get available slots\nexport const useAvailableSlots=function(date,providerId){let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:6;let offset=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;return useQuery({queryKey:[...queryKeys.slots,date,providerId,limit,offset],queryFn:()=>apiService.getAvailableSlots({date,providerId,limit,offset}),staleTime:5*60*1000,// 5 minutes\ngcTime:10*60*1000,// 10 minutes\nrefetchInterval:3000// Poll every 3 seconds for real-time updates\n});};// Hook to get a specific booking\nexport const useBooking=id=>{return useQuery({queryKey:queryKeys.booking(id),queryFn:()=>apiService.getBooking(id),enabled:!!id,staleTime:2*60*1000// 2 minutes\n});};// Hook to get all providers\nexport const useProviders=()=>{return useQuery({queryKey:['providers'],queryFn:()=>apiService.getProviders(),staleTime:10*60*1000// 10 minutes\n});};// Hook to get all slots (including booked/unavailable) for a provider and date\nexport const useAllSlotsForProviderAndDate=(date,providerId,enabled)=>{return useQuery({queryKey:['all-slots',date,providerId],queryFn:()=>apiService.getAllSlotsForProviderAndDate(date,providerId),enabled,staleTime:5*60*1000,refetchInterval:3000});};// Hook to create a booking\nexport const useCreateBooking=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:bookingData=>apiService.createBooking(bookingData),onSuccess:()=>{// Invalidate slots query to refresh available slots\nqueryClient.invalidateQueries({queryKey:queryKeys.slots});},onError:error=>{console.error('Failed to create booking:',error);}});};// Hook to update booking status\nexport const useUpdateBooking=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:_ref=>{let{id,status}=_ref;return apiService.updateBooking(id,{status});},onSuccess:updatedBooking=>{// Update the specific booking in cache\nqueryClient.setQueryData(queryKeys.booking(updatedBooking.id),updatedBooking);// Invalidate slots query to refresh availability\nqueryClient.invalidateQueries({queryKey:queryKeys.slots});},onError:error=>{console.error('Failed to update booking:',error);}});};// Hook to cancel booking\nexport const useCancelBooking=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:id=>apiService.cancelBooking(id),onSuccess:cancelledBooking=>{// Update the specific booking in cache\nqueryClient.setQueryData(queryKeys.booking(cancelledBooking.id),cancelledBooking);// Invalidate slots query to refresh availability\nqueryClient.invalidateQueries({queryKey:queryKeys.slots});},onError:error=>{console.error('Failed to cancel booking:',error);}});};","map":{"version":3,"names":["useMutation","useQuery","useQueryClient","apiService","queryKeys","slots","bookings","booking","id","useAvailableSlots","date","providerId","limit","arguments","length","undefined","offset","queryKey","queryFn","getAvailableSlots","staleTime","gcTime","refetchInterval","useBooking","getBooking","enabled","useProviders","getProviders","useAllSlotsForProviderAndDate","getAllSlotsForProviderAndDate","useCreateBooking","queryClient","mutationFn","bookingData","createBooking","onSuccess","invalidateQueries","onError","error","console","useUpdateBooking","_ref","status","updateBooking","updatedBooking","setQueryData","useCancelBooking","cancelBooking","cancelledBooking"],"sources":["/Users/yash/Desktop/urban booking/frontend/src/hooks/useBookings.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiService } from '../services/api';\nimport { CreateBookingRequest, UpdateBookingRequest, BookingStatus } from '../types';\n\n// Query keys for React Query\nexport const queryKeys = {\n  slots: ['slots'] as const,\n  bookings: ['bookings'] as const,\n  booking: (id: string) => ['booking', id] as const,\n};\n\n// Hook to get available slots\nexport const useAvailableSlots = (date?: string, providerId?: string, limit: number = 6, offset: number = 0) => {\n  return useQuery({\n    queryKey: [...queryKeys.slots, date, providerId, limit, offset],\n    queryFn: () => apiService.getAvailableSlots({ date, providerId, limit, offset }),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n    refetchInterval: 3000, // Poll every 3 seconds for real-time updates\n  });\n};\n\n// Hook to get a specific booking\nexport const useBooking = (id: string) => {\n  return useQuery({\n    queryKey: queryKeys.booking(id),\n    queryFn: () => apiService.getBooking(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n};\n\n// Hook to get all providers\nexport const useProviders = () => {\n  return useQuery({\n    queryKey: ['providers'],\n    queryFn: () => apiService.getProviders(),\n    staleTime: 10 * 60 * 1000, // 10 minutes\n  });\n};\n\n// Hook to get all slots (including booked/unavailable) for a provider and date\nexport const useAllSlotsForProviderAndDate = (date: string, providerId: string, enabled: boolean) => {\n  return useQuery({\n    queryKey: ['all-slots', date, providerId],\n    queryFn: () => apiService.getAllSlotsForProviderAndDate(date, providerId),\n    enabled,\n    staleTime: 5 * 60 * 1000,\n    refetchInterval: 3000,\n  });\n};\n\n// Hook to create a booking\nexport const useCreateBooking = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (bookingData: CreateBookingRequest) => \n      apiService.createBooking(bookingData),\n    onSuccess: () => {\n      // Invalidate slots query to refresh available slots\n      queryClient.invalidateQueries({ queryKey: queryKeys.slots });\n    },\n    onError: (error: any) => {\n      console.error('Failed to create booking:', error);\n    },\n  });\n};\n\n// Hook to update booking status\nexport const useUpdateBooking = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: BookingStatus }) =>\n      apiService.updateBooking(id, { status }),\n    onSuccess: (updatedBooking) => {\n      // Update the specific booking in cache\n      queryClient.setQueryData(\n        queryKeys.booking(updatedBooking.id),\n        updatedBooking\n      );\n      // Invalidate slots query to refresh availability\n      queryClient.invalidateQueries({ queryKey: queryKeys.slots });\n    },\n    onError: (error: any) => {\n      console.error('Failed to update booking:', error);\n    },\n  });\n};\n\n// Hook to cancel booking\nexport const useCancelBooking = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => apiService.cancelBooking(id),\n    onSuccess: (cancelledBooking) => {\n      // Update the specific booking in cache\n      queryClient.setQueryData(\n        queryKeys.booking(cancelledBooking.id),\n        cancelledBooking\n      );\n      // Invalidate slots query to refresh availability\n      queryClient.invalidateQueries({ queryKey: queryKeys.slots });\n    },\n    onError: (error: any) => {\n      console.error('Failed to cancel booking:', error);\n    },\n  });\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}