{"ast":null,"code":"var _jsxFileName = \"/Users/yash/Desktop/urban booking/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check for existing token on app load\n  useEffect(() => {\n    const savedToken = localStorage.getItem('authToken');\n    const savedUser = localStorage.getItem('authUser');\n    if (savedToken && savedUser) {\n      try {\n        setToken(savedToken);\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user data:', error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('authUser');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n      setUser(data.user);\n      setToken(data.token);\n\n      // Save to localStorage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('authUser', JSON.stringify(data.user));\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Login failed');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n      setUser(data.user);\n      setToken(data.token);\n\n      // Save to localStorage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('authUser', JSON.stringify(data.user));\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Registration failed');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    setError(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('authUser');\n  };\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    isLoading,\n    error\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mzZbxlz3rJTcku+Jn+vbpbhpSMU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","isLoading","setIsLoading","error","setError","savedToken","localStorage","getItem","savedUser","JSON","parse","console","removeItem","login","email","password","response","fetch","method","headers","body","stringify","data","json","ok","message","setItem","register","name","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yash/Desktop/urban booking/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check for existing token on app load\n  useEffect(() => {\n    const savedToken = localStorage.getItem('authToken');\n    const savedUser = localStorage.getItem('authUser');\n    \n    if (savedToken && savedUser) {\n      try {\n        setToken(savedToken);\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Error parsing saved user data:', error);\n        localStorage.removeItem('authToken');\n        localStorage.removeItem('authUser');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n\n      setUser(data.user);\n      setToken(data.token);\n      \n      // Save to localStorage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('authUser', JSON.stringify(data.user));\n      \n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Login failed');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (name: string, email: string, password: string) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n\n      setUser(data.user);\n      setToken(data.token);\n      \n      // Save to localStorage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('authUser', JSON.stringify(data.user));\n      \n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Registration failed');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    setError(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('authUser');\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    isLoading,\n    error,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}