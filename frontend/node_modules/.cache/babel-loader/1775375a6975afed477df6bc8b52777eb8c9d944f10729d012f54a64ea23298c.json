{"ast":null,"code":"import axios from'axios';class ApiService{constructor(){this.api=void 0;this.api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:3001',headers:{'Content-Type':'application/json'},timeout:10000});// Add auth token to requests if available\nthis.api.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});// Request interceptor for logging\nthis.api.interceptors.request.use(config=>{var _config$method;console.log(`üöÄ API Request: ${(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase()} ${config.url}`);return config;},error=>{console.error('‚ùå API Request Error:',error);return Promise.reject(error);});// Response interceptor for logging\nthis.api.interceptors.response.use(response=>{console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);return response;},error=>{var _error$response,_error$response2;console.error('‚ùå API Response Error:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);return Promise.reject(error);});}// Slots API\nasync getAvailableSlots(params){const response=await this.api.get('/api/slots',{params});return response.data;}async getAllSlotsForProviderAndDate(date,providerId){const response=await this.api.get('/api/slots/all',{params:{date,providerId}});return response.data;}// Bookings API\nasync createBooking(bookingData){const response=await this.api.post('/api/bookings',bookingData);return response.data;}async getBooking(id){const response=await this.api.get(`/api/bookings/${id}`);return response.data;}async updateBooking(id,updateData){const response=await this.api.put(`/api/bookings/${id}`,updateData);return response.data;}async cancelBooking(id){const response=await this.api.delete(`/api/bookings/${id}`);return response.data;}async getProviders(){const response=await this.api.get('/api/providers');return response.data;}async getBookingsByCustomer(customerId){const response=await this.api.get(`/api/bookings/customer/${customerId}`);return response.data;}}export const apiService=new ApiService();export default apiService;","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$response2","data","getAvailableSlots","params","get","getAllSlotsForProviderAndDate","date","providerId","createBooking","bookingData","post","getBooking","id","updateBooking","updateData","put","cancelBooking","delete","getProviders","getBookingsByCustomer","customerId","apiService"],"sources":["/Users/yash/Desktop/urban booking/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport { \n  Slot, \n  Booking, \n  CreateBookingRequest, \n  UpdateBookingRequest, \n  GetSlotsParams,\n  ApiResponse,\n  User\n} from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      timeout: 10000,\n    });\n\n    // Add auth token to requests if available\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Request interceptor for logging\n    this.api.interceptors.request.use(\n      (config) => {\n        console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);\n        return config;\n      },\n      (error) => {\n        console.error('‚ùå API Request Error:', error);\n        return Promise.reject(error);\n      }\n    );\n\n    // Response interceptor for logging\n    this.api.interceptors.response.use(\n      (response: AxiosResponse) => {\n        console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\n        return response;\n      },\n      (error) => {\n        console.error('‚ùå API Response Error:', error.response?.status, error.response?.data);\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Slots API\n  async getAvailableSlots(params?: GetSlotsParams & { limit?: number; offset?: number }): Promise<Slot[]> {\n    const response = await this.api.get<Slot[]>('/api/slots', { params });\n    return response.data;\n  }\n\n  async getAllSlotsForProviderAndDate(date: string, providerId: string): Promise<Slot[]> {\n    const response = await this.api.get<Slot[]>('/api/slots/all', { params: { date, providerId } });\n    return response.data;\n  }\n\n  // Bookings API\n  async createBooking(bookingData: CreateBookingRequest): Promise<Booking> {\n    const response = await this.api.post<Booking>('/api/bookings', bookingData);\n    return response.data;\n  }\n\n  async getBooking(id: string): Promise<Booking> {\n    const response = await this.api.get<Booking>(`/api/bookings/${id}`);\n    return response.data;\n  }\n\n  async updateBooking(id: string, updateData: UpdateBookingRequest): Promise<Booking> {\n    const response = await this.api.put<Booking>(`/api/bookings/${id}`, updateData);\n    return response.data;\n  }\n\n  async cancelBooking(id: string): Promise<Booking> {\n    const response = await this.api.delete<Booking>(`/api/bookings/${id}`);\n    return response.data;\n  }\n\n  async getProviders(): Promise<User[]> {\n    const response = await this.api.get<User[]>('/api/providers');\n    return response.data;\n  }\n\n  async getBookingsByCustomer(customerId: string): Promise<Booking[]> {\n    const response = await this.api.get<Booking[]>(`/api/bookings/customer/${customerId}`);\n    return response.data;\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}