{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiService } from '../services/api';\n// Query keys for React Query\nexport const queryKeys = {\n  slots: ['slots'],\n  bookings: ['bookings'],\n  booking: id => ['booking', id]\n};\n\n// Hook to get available slots\nexport const useAvailableSlots = (date, providerId) => {\n  _s();\n  return useQuery({\n    queryKey: [...queryKeys.slots, date, providerId],\n    queryFn: () => apiService.getAvailableSlots({\n      date,\n      providerId\n    }),\n    staleTime: 5 * 60 * 1000,\n    // 5 minutes\n    gcTime: 10 * 60 * 1000 // 10 minutes\n  });\n};\n\n// Hook to get a specific booking\n_s(useAvailableSlots, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useBooking = id => {\n  _s2();\n  return useQuery({\n    queryKey: queryKeys.booking(id),\n    queryFn: () => apiService.getBooking(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000 // 2 minutes\n  });\n};\n\n// Hook to create a booking\n_s2(useBooking, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCreateBooking = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: bookingData => apiService.createBooking(bookingData),\n    onSuccess: () => {\n      // Invalidate slots query to refresh available slots\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.slots\n      });\n    },\n    onError: error => {\n      console.error('Failed to create booking:', error);\n    }\n  });\n};\n\n// Hook to update booking status\n_s3(useCreateBooking, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateBooking = () => {\n  _s4();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: ({\n      id,\n      status\n    }) => apiService.updateBooking(id, {\n      status\n    }),\n    onSuccess: updatedBooking => {\n      // Update the specific booking in cache\n      queryClient.setQueryData(queryKeys.booking(updatedBooking.id), updatedBooking);\n      // Invalidate slots query to refresh availability\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.slots\n      });\n    },\n    onError: error => {\n      console.error('Failed to update booking:', error);\n    }\n  });\n};\n\n// Hook to cancel booking\n_s4(useUpdateBooking, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useCancelBooking = () => {\n  _s5();\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: id => apiService.cancelBooking(id),\n    onSuccess: cancelledBooking => {\n      // Update the specific booking in cache\n      queryClient.setQueryData(queryKeys.booking(cancelledBooking.id), cancelledBooking);\n      // Invalidate slots query to refresh availability\n      queryClient.invalidateQueries({\n        queryKey: queryKeys.slots\n      });\n    },\n    onError: error => {\n      console.error('Failed to cancel booking:', error);\n    }\n  });\n};\n_s5(useCancelBooking, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["useMutation","useQuery","useQueryClient","apiService","queryKeys","slots","bookings","booking","id","useAvailableSlots","date","providerId","_s","queryKey","queryFn","getAvailableSlots","staleTime","gcTime","useBooking","_s2","getBooking","enabled","useCreateBooking","_s3","queryClient","mutationFn","bookingData","createBooking","onSuccess","invalidateQueries","onError","error","console","useUpdateBooking","_s4","status","updateBooking","updatedBooking","setQueryData","useCancelBooking","_s5","cancelBooking","cancelledBooking"],"sources":["/Users/yash/Desktop/urban booking/frontend/src/hooks/useBookings.ts"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { apiService } from '../services/api';\nimport { CreateBookingRequest, UpdateBookingRequest, BookingStatus } from '../types';\n\n// Query keys for React Query\nexport const queryKeys = {\n  slots: ['slots'] as const,\n  bookings: ['bookings'] as const,\n  booking: (id: string) => ['booking', id] as const,\n};\n\n// Hook to get available slots\nexport const useAvailableSlots = (date?: string, providerId?: string) => {\n  return useQuery({\n    queryKey: [...queryKeys.slots, date, providerId],\n    queryFn: () => apiService.getAvailableSlots({ date, providerId }),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n};\n\n// Hook to get a specific booking\nexport const useBooking = (id: string) => {\n  return useQuery({\n    queryKey: queryKeys.booking(id),\n    queryFn: () => apiService.getBooking(id),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000, // 2 minutes\n  });\n};\n\n// Hook to create a booking\nexport const useCreateBooking = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (bookingData: CreateBookingRequest) => \n      apiService.createBooking(bookingData),\n    onSuccess: () => {\n      // Invalidate slots query to refresh available slots\n      queryClient.invalidateQueries({ queryKey: queryKeys.slots });\n    },\n    onError: (error: any) => {\n      console.error('Failed to create booking:', error);\n    },\n  });\n};\n\n// Hook to update booking status\nexport const useUpdateBooking = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: BookingStatus }) =>\n      apiService.updateBooking(id, { status }),\n    onSuccess: (updatedBooking) => {\n      // Update the specific booking in cache\n      queryClient.setQueryData(\n        queryKeys.booking(updatedBooking.id),\n        updatedBooking\n      );\n      // Invalidate slots query to refresh availability\n      queryClient.invalidateQueries({ queryKey: queryKeys.slots });\n    },\n    onError: (error: any) => {\n      console.error('Failed to update booking:', error);\n    },\n  });\n};\n\n// Hook to cancel booking\nexport const useCancelBooking = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => apiService.cancelBooking(id),\n    onSuccess: (cancelledBooking) => {\n      // Update the specific booking in cache\n      queryClient.setQueryData(\n        queryKeys.booking(cancelledBooking.id),\n        cancelledBooking\n      );\n      // Invalidate slots query to refresh availability\n      queryClient.invalidateQueries({ queryKey: queryKeys.slots });\n    },\n    onError: (error: any) => {\n      console.error('Failed to cancel booking:', error);\n    },\n  });\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}